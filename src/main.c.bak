#include "ui.h"
#include "editor.h"
#include "files.h"
#include "i18n.h"
#include "theme.h"
#include "log.h"
#include "plugin_manager.h"
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

void show_help() {
    printf("%s\n\n", get_string("mohavim_modular_editor"));
    printf("%s\n\n", get_string("usage"));
    printf("%s\n", get_string("options"));
    printf("%s\n", get_string("help_option"));
    printf("%s\n", get_string("lang_option"));
    printf("%s\n", get_string("theme_option"));
    printf("%s\n", get_string("verbose_option"));
    printf("%s\n", get_string("install_plugin_option"));
    printf("%s\n", get_string("list_plugins_option"));
    printf("\n%s\n", get_string("examples"));
    printf("  mohavim --lang en --theme cyberpunk\n");
    printf("  mohavim --verbose\n");
    printf("  mohavim --install-plugin myplugin\n");
    printf("\n%s\n", get_string("language_config"));
    printf("%s\n", get_string("language_config_desc"));
    printf("%s\n", get_string("env_var"));
    printf("%s\n", get_string("config_file"));
    printf("%s\n", get_string("cmd_line"));
}

int main(int argc, char* argv[]) {
    // Inicializar sistemas
    init_i18n();
    init_themes();
    init_logging();
    init_plugin_manager();

    // Processar argumentos de linha de comando
    int language_set = 0;
    for (int i = 1; i < argc; i++) {
        if (strcmp(argv[i], "--help") == 0 || strcmp(argv[i], "-h") == 0) {
            show_help();
            return 0;
        }
        else if (strcmp(argv[i], "--lang") == 0 && i + 1 < argc) {
            if (!load_language(argv[++i])) {
                printf("%s '%s'\n", get_string("language_not_found"), argv[i]);
                return 1;
            }
            language_set = 1;
            log_message(LOG_INFO, "Idioma alterado para: %s", argv[i]);
        }
        else if (strcmp(argv[i], "--theme") == 0 && i + 1 < argc) {
            if (!load_theme(argv[++i])) {
                printf("%s '%s'\n", get_string("theme_not_found"), argv[i]);
                return 1;
            }
            log_message(LOG_INFO, "Tema alterado para: %s", argv[i]);
        }
        else if (strcmp(argv[i], "--verbose") == 0 || strcmp(argv[i], "-v") == 0) {
            toggle_verbose_mode();
        }
        else if (strcmp(argv[i], "--install-plugin") == 0 && i + 1 < argc) {
            if (load_plugin(argv[++i])) {\n                printf("%s '%s'\\n", get_string("plugin_installed"), argv[i]);\n            }
            return 0;
        }
        else if (strcmp(argv[i], "--list-plugins") == 0) {
            list_plugins();
            return 0;
        }
        else {
            printf("%s '%s'\n", get_string("unknown_argument"), argv[i]);
            printf("%s\n", get_string("use_help"));
            return 1;
        }
    }
    
    // If no language was set via command line, auto-detect
    if (!language_set) {
        auto_detect_language();
    }

    int opcao_atual=0;
    mostrar_logo();
    printf("\n%s", get_string("press_enter_continue")); getchar();
    configurar_terminal();

    while(1){
        mostrar_menu(opcao_atual);
        int tecla=ler_tecla();
        switch(tecla){
            case 65: opcao_atual=(opcao_atual-1+9)%9; break;
            case 66: opcao_atual=(opcao_atual+1)%9; break;
            case 10: restaurar_terminal();
                switch(opcao_atual){
                    case 0: abrir_arquivo(); break;
                    case 1: novo_arquivo(); break;
                    case 2: buscar_arquivo(); break;
                    case 3: show_logs(); break;
                    case 4: mostrar_menu_temas(); break;
                    case 5: mostrar_menu_idiomas(); break;
                    case 6: manage_plugins_menu(); break;
                    case 7: sobre(); break;
                    case 8: limpar_tela(); print_with_color(get_color("accent"), get_string("exiting")); printf("\n%s\n", get_string("thanks")); exit(0);
                }
                configurar_terminal();
                break;
            case 27: restaurar_terminal(); limpar_tela(); print_with_color(get_color("accent"), get_string("exiting")); printf("\n%s\n", get_string("thanks")); exit(0);
        }
    }
    return 0;
}
